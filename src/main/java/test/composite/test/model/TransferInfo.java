/*
 * transfer-service
 * api.description
 *
 * OpenAPI spec version: 1.0
 * Contact: api@demo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package test.composite.test.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import test.composite.test.model.Account;
import test.composite.test.model.Customer;
import test.composite.test.model.Frequency;
import test.composite.test.model.TransferType;
import javax.validation.constraints.*;

/**
 * TransferInfo
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2020-07-05T13:11:22.424Z")
public class TransferInfo   {
  @JsonProperty("customer")
  private Customer customer = null;

  @JsonProperty("source_account")
  private Account sourceAccount = null;

  @JsonProperty("source_account_list")
  private List<Account> sourceAccountList = new ArrayList<Account>();

  @JsonProperty("target_account")
  private Account targetAccount = null;

  @JsonProperty("target_account_list")
  private List<Account> targetAccountList = new ArrayList<Account>();

  @JsonProperty("transfer_type")
  private TransferType transferType = null;

  @JsonProperty("transfer_type_list")
  private List<TransferType> transferTypeList = new ArrayList<TransferType>();

  /**
   * Gets or Sets transferScheme
   */
  public enum TransferSchemeEnum {
    NOW("NOW"),
    
    SCHEDULED("SCHEDULED");

    private String value;

    TransferSchemeEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TransferSchemeEnum fromValue(String text) {
      for (TransferSchemeEnum b : TransferSchemeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("transfer_scheme")
  private TransferSchemeEnum transferScheme = null;

  /**
   * Gets or Sets transferSchemeList
   */
  public enum TransferSchemeListEnum {
    NOW("NOW"),
    
    SCHEDULED("SCHEDULED");

    private String value;

    TransferSchemeListEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TransferSchemeListEnum fromValue(String text) {
      for (TransferSchemeListEnum b : TransferSchemeListEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("transfer_scheme_list")
  private List<TransferSchemeListEnum> transferSchemeList = new ArrayList<TransferSchemeListEnum>();

  @JsonProperty("transfer_frequency")
  private Frequency transferFrequency = null;

  @JsonProperty("transfer_frequency_list")
  private List<Frequency> transferFrequencyList = new ArrayList<Frequency>();

  @JsonProperty("transfer_amount")
  private Double transferAmount = null;

  @JsonProperty("transfer_date")
  private Date transferDate = null;

  @JsonProperty("transfer_memo")
  private String transferMemo = null;

  public TransferInfo customer(Customer customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   **/
  @JsonProperty("customer")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public Customer getCustomer() {
    return customer;
  }

  public void setCustomer(Customer customer) {
    this.customer = customer;
  }

  public TransferInfo sourceAccount(Account sourceAccount) {
    this.sourceAccount = sourceAccount;
    return this;
  }

  /**
   * Get sourceAccount
   * @return sourceAccount
   **/
  @JsonProperty("source_account")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public Account getSourceAccount() {
    return sourceAccount;
  }

  public void setSourceAccount(Account sourceAccount) {
    this.sourceAccount = sourceAccount;
  }

  public TransferInfo sourceAccountList(List<Account> sourceAccountList) {
    this.sourceAccountList = sourceAccountList;
    return this;
  }

  public TransferInfo addSourceAccountListItem(Account sourceAccountListItem) {
    this.sourceAccountList.add(sourceAccountListItem);
    return this;
  }

  /**
   * Get sourceAccountList
   * @return sourceAccountList
   **/
  @JsonProperty("source_account_list")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public List<Account> getSourceAccountList() {
    return sourceAccountList;
  }

  public void setSourceAccountList(List<Account> sourceAccountList) {
    this.sourceAccountList = sourceAccountList;
  }

  public TransferInfo targetAccount(Account targetAccount) {
    this.targetAccount = targetAccount;
    return this;
  }

  /**
   * Get targetAccount
   * @return targetAccount
   **/
  @JsonProperty("target_account")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public Account getTargetAccount() {
    return targetAccount;
  }

  public void setTargetAccount(Account targetAccount) {
    this.targetAccount = targetAccount;
  }

  public TransferInfo targetAccountList(List<Account> targetAccountList) {
    this.targetAccountList = targetAccountList;
    return this;
  }

  public TransferInfo addTargetAccountListItem(Account targetAccountListItem) {
    this.targetAccountList.add(targetAccountListItem);
    return this;
  }

  /**
   * Get targetAccountList
   * @return targetAccountList
   **/
  @JsonProperty("target_account_list")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public List<Account> getTargetAccountList() {
    return targetAccountList;
  }

  public void setTargetAccountList(List<Account> targetAccountList) {
    this.targetAccountList = targetAccountList;
  }

  public TransferInfo transferType(TransferType transferType) {
    this.transferType = transferType;
    return this;
  }

  /**
   * Get transferType
   * @return transferType
   **/
  @JsonProperty("transfer_type")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public TransferType getTransferType() {
    return transferType;
  }

  public void setTransferType(TransferType transferType) {
    this.transferType = transferType;
  }

  public TransferInfo transferTypeList(List<TransferType> transferTypeList) {
    this.transferTypeList = transferTypeList;
    return this;
  }

  public TransferInfo addTransferTypeListItem(TransferType transferTypeListItem) {
    this.transferTypeList.add(transferTypeListItem);
    return this;
  }

  /**
   * Get transferTypeList
   * @return transferTypeList
   **/
  @JsonProperty("transfer_type_list")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public List<TransferType> getTransferTypeList() {
    return transferTypeList;
  }

  public void setTransferTypeList(List<TransferType> transferTypeList) {
    this.transferTypeList = transferTypeList;
  }

  public TransferInfo transferScheme(TransferSchemeEnum transferScheme) {
    this.transferScheme = transferScheme;
    return this;
  }

  /**
   * Get transferScheme
   * @return transferScheme
   **/
  @JsonProperty("transfer_scheme")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public TransferSchemeEnum getTransferScheme() {
    return transferScheme;
  }

  public void setTransferScheme(TransferSchemeEnum transferScheme) {
    this.transferScheme = transferScheme;
  }

  public TransferInfo transferSchemeList(List<TransferSchemeListEnum> transferSchemeList) {
    this.transferSchemeList = transferSchemeList;
    return this;
  }

  public TransferInfo addTransferSchemeListItem(TransferSchemeListEnum transferSchemeListItem) {
    this.transferSchemeList.add(transferSchemeListItem);
    return this;
  }

  /**
   * Get transferSchemeList
   * @return transferSchemeList
   **/
  @JsonProperty("transfer_scheme_list")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public List<TransferSchemeListEnum> getTransferSchemeList() {
    return transferSchemeList;
  }

  public void setTransferSchemeList(List<TransferSchemeListEnum> transferSchemeList) {
    this.transferSchemeList = transferSchemeList;
  }

  public TransferInfo transferFrequency(Frequency transferFrequency) {
    this.transferFrequency = transferFrequency;
    return this;
  }

  /**
   * Get transferFrequency
   * @return transferFrequency
   **/
  @JsonProperty("transfer_frequency")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public Frequency getTransferFrequency() {
    return transferFrequency;
  }

  public void setTransferFrequency(Frequency transferFrequency) {
    this.transferFrequency = transferFrequency;
  }

  public TransferInfo transferFrequencyList(List<Frequency> transferFrequencyList) {
    this.transferFrequencyList = transferFrequencyList;
    return this;
  }

  public TransferInfo addTransferFrequencyListItem(Frequency transferFrequencyListItem) {
    this.transferFrequencyList.add(transferFrequencyListItem);
    return this;
  }

  /**
   * Get transferFrequencyList
   * @return transferFrequencyList
   **/
  @JsonProperty("transfer_frequency_list")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public List<Frequency> getTransferFrequencyList() {
    return transferFrequencyList;
  }

  public void setTransferFrequencyList(List<Frequency> transferFrequencyList) {
    this.transferFrequencyList = transferFrequencyList;
  }

  public TransferInfo transferAmount(Double transferAmount) {
    this.transferAmount = transferAmount;
    return this;
  }

  /**
   * Get transferAmount
   * minimum: 0.01
   * @return transferAmount
   **/
  @JsonProperty("transfer_amount")
  @ApiModelProperty(required = true, value = "")
  @NotNull
 @DecimalMin("0.01")  public Double getTransferAmount() {
    return transferAmount;
  }

  public void setTransferAmount(Double transferAmount) {
    this.transferAmount = transferAmount;
  }

  public TransferInfo transferDate(Date transferDate) {
    this.transferDate = transferDate;
    return this;
  }

  /**
   * Get transferDate
   * @return transferDate
   **/
  @JsonProperty("transfer_date")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public Date getTransferDate() {
    return transferDate;
  }

  public void setTransferDate(Date transferDate) {
    this.transferDate = transferDate;
  }

  public TransferInfo transferMemo(String transferMemo) {
    this.transferMemo = transferMemo;
    return this;
  }

  /**
   * Get transferMemo
   * @return transferMemo
   **/
  @JsonProperty("transfer_memo")
  @ApiModelProperty(value = "")
  public String getTransferMemo() {
    return transferMemo;
  }

  public void setTransferMemo(String transferMemo) {
    this.transferMemo = transferMemo;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransferInfo transferInfo = (TransferInfo) o;
    return Objects.equals(this.customer, transferInfo.customer) &&
        Objects.equals(this.sourceAccount, transferInfo.sourceAccount) &&
        Objects.equals(this.sourceAccountList, transferInfo.sourceAccountList) &&
        Objects.equals(this.targetAccount, transferInfo.targetAccount) &&
        Objects.equals(this.targetAccountList, transferInfo.targetAccountList) &&
        Objects.equals(this.transferType, transferInfo.transferType) &&
        Objects.equals(this.transferTypeList, transferInfo.transferTypeList) &&
        Objects.equals(this.transferScheme, transferInfo.transferScheme) &&
        Objects.equals(this.transferSchemeList, transferInfo.transferSchemeList) &&
        Objects.equals(this.transferFrequency, transferInfo.transferFrequency) &&
        Objects.equals(this.transferFrequencyList, transferInfo.transferFrequencyList) &&
        Objects.equals(this.transferAmount, transferInfo.transferAmount) &&
        Objects.equals(this.transferDate, transferInfo.transferDate) &&
        Objects.equals(this.transferMemo, transferInfo.transferMemo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customer, sourceAccount, sourceAccountList, targetAccount, targetAccountList, transferType, transferTypeList, transferScheme, transferSchemeList, transferFrequency, transferFrequencyList, transferAmount, transferDate, transferMemo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferInfo {\n");
    
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    sourceAccount: ").append(toIndentedString(sourceAccount)).append("\n");
    sb.append("    sourceAccountList: ").append(toIndentedString(sourceAccountList)).append("\n");
    sb.append("    targetAccount: ").append(toIndentedString(targetAccount)).append("\n");
    sb.append("    targetAccountList: ").append(toIndentedString(targetAccountList)).append("\n");
    sb.append("    transferType: ").append(toIndentedString(transferType)).append("\n");
    sb.append("    transferTypeList: ").append(toIndentedString(transferTypeList)).append("\n");
    sb.append("    transferScheme: ").append(toIndentedString(transferScheme)).append("\n");
    sb.append("    transferSchemeList: ").append(toIndentedString(transferSchemeList)).append("\n");
    sb.append("    transferFrequency: ").append(toIndentedString(transferFrequency)).append("\n");
    sb.append("    transferFrequencyList: ").append(toIndentedString(transferFrequencyList)).append("\n");
    sb.append("    transferAmount: ").append(toIndentedString(transferAmount)).append("\n");
    sb.append("    transferDate: ").append(toIndentedString(transferDate)).append("\n");
    sb.append("    transferMemo: ").append(toIndentedString(transferMemo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

